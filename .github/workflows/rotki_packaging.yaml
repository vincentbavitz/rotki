name: Rotki Packaging
on:
  push:
    tags:
      - 'v*'
jobs:
  create_draft:
    name: Create Draft
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Rotki ${{ env.RELEASE_VERSION }} -
          body: |
            # Description

            For more information check the detailed changelog below :point_down:

            # Downloads

            Upgrade is highly recommended. Download the binary for your OS from below:

            - **Linux**
              - [AppImage](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_x86_64-${{ env.RELEASE_VERSION }}.AppImage)
              - [Tar with executable](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_x64-${{ env.RELEASE_VERSION }}.tar.xz)
              - [deb package](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_amd64-${{ env.RELEASE_VERSION }}.deb)
            - **OSX**
              - [DMG](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin-${{ env.RELEASE_VERSION }}.dmg)
              - [ZIP](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin-${{ env.RELEASE_VERSION }}.zip)
            - **Windows**
              - [Windows executable](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-win32-${{ env.RELEASE_VERSION }}.exe)
            
            Optionally, you can also [verify the integrity](https://rotki.readthedocs.io/en/latest/installation_guide.html#verifying-integrity) of the aforementioned binaries using the following checksums:
            
            - **Linux**
              - [AppImage checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_x86_64-${{ env.RELEASE_VERSION }}.AppImage.sha512)
              - [Tar with executable checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_x64-${{ env.RELEASE_VERSION }}.tar.xz.sha512)
              - [deb package](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-linux_amd64-${{ env.RELEASE_VERSION }}.deb.sha512)
            - **OSX**
              - [DMG checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin-${{ env.RELEASE_VERSION }}.dmg.sha512)
              - [ZIP checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-darwin-${{ env.RELEASE_VERSION }}.zip.sha512)
            - **Windows**
              - [Windows executable checksum](https://github.com/rotki/rotki/releases/download/${{ env.RELEASE_VERSION }}/rotki-win32-${{ env.RELEASE_VERSION }}.exe.sha512)

            # Release Highlights
            ----

            These were the highlights. Check below for the full changelog :point_down:
            # New Features

            # Bug Fixes

            # Newly supported assets

            Added support for the following assets:

          draft: true
  linux:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]
        node-version: [12.x]
    runs-on: ${{ matrix.os }}
    needs: create_draft
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: pip cache persistence
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: npm cache persistence
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/cache/Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Setup SQLCipher
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils
          ./install_deps.sh
          sudo ldconfig
      - name: Package
        id: packaging
        run: ./package.sh
      - name: Upload AppImage sha512 checksum file
        uses: actions/upload-release-asset@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         upload_url: ${{ needs.create_draft.outputs.upload_url }}
         asset_path: ${{ steps.packaging.outputs.binary }}
         asset_name: ${{ steps.packaging.outputs.binary_name }}
         asset_content_type: application/octet-stream
      - name: Upload AppImage sha512 checksum file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.upload_url }}
          asset_path: ${{ steps.packaging.outputs.binary_checksum }}
          asset_name: ${{ steps.packaging.outputs.binary_checksum_name }}
          asset_content_type: text/plain
      - name: Upload tar sha512 checksum file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.upload_url }}
          asset_path: ${{ steps.packaging.outputs.archive_checksum }}
          asset_name: ${{ steps.packaging.outputs.archive_checksum_name }}
          asset_content_type: text/plain
      - name: Upload deb sha512 checksum file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.upload_url }}
          asset_path: ${{ steps.packaging.outputs.deb_checksum }}
          asset_name: ${{ steps.packaging.outputs.deb_checksum_name }}
          asset_content_type: text/plain

  osx:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: [macos-latest]
        python-version: [3.7]
        node-version: [12.x]
    runs-on: ${{ matrix.os }}
    needs: create_draft
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        run: packaging/setup-osx.sh
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: pip cache persistence
        uses: actions/cache@v2
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: npm cache persistence
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/Library/Caches/Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Setup SQLCipher
        run: |
          cd "$(brew --repo homebrew/core)"
          git checkout 2731bfdc785e85de8242b164acbf4fcb627a91e2 Formula/sqlcipher.rb #This formula installs 4.4.0 of sqlcipher
          brew install sqlcipher
      - name: Package
        id: packaging
        run: |
          pip3 install virtualenv
          python3 -m virtualenv ~/venv
          source ~/venv/bin/activate
          ./package.sh
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          IDENTITY: ${{ secrets.IDENTITY }}
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
      - name: Upload dmg sha512 checksum file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.upload_url }}
          asset_path: ${{ steps.packaging.outputs.binary_checksum }}
          asset_name: ${{ steps.packaging.outputs.binary_checksum_name }}
          asset_content_type: text/plain
      - name: Upload zip sha512 checksum file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.upload_url }}
          asset_path: ${{ steps.packaging.outputs.archive_checksum }}
          asset_name: ${{ steps.packaging.outputs.archive_checksum_name }}
          asset_content_type: text/plain

  windows:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SQLCIPHER_VERSION: 'v4.4.0'
      PYSQLCIPHER3_VERSION: 'fd1b547407bcb7198107fe3c458105286a060b0d'
      BUILD_DEPENDENCIES: "build-dependencies"
    strategy:
      matrix:
        os: [ windows-latest ]
        python-version: [ 3.7 ]
        node-version: [ 12.x ]
    runs-on: ${{ matrix.os }}
    needs: create_draft
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: pip cache persistence
        uses: actions/cache@v2    
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: npm cache persistence
        uses: actions/cache@v2    
        with:
          path: | 
            ${{ steps.npm-cache.outputs.dir }}
            ~\AppData\Local\Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Persist Build Dependencies
        uses: actions/cache@v2        
        with:
          path: | 
            ~\${{ env.BUILD_DEPENDENCIES }}\
            ~\AppData\Local\Temp\chocolatey\
          key: ${{ runner.os }}-build-dependencies-${{ env.SQLCIPHER_VERSION }}-${{ env.PYSQLCIPHER3_VERSION }}
          restore-keys: |
            ${{ runner.os }}-build-dependencies-${{ env.SQLCIPHER_VERSION }}-${{ env.PYSQLCIPHER3_VERSION }}
      - name: Build rotki
        id: build
        run: .\package.ps1
        shell: powershell
      - name: Upload exe sha512 checksum file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.binary_checksum }}
          asset_name: ${{ steps.build.outputs.binary_checksum_name }}
          asset_content_type: text/plain

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Rotki Version
        id: rotki_version
        run: echo "::set-output name=version::${GITHUB_REF#refs/*/}"
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            rotki/rotki:latest
            rotki/rotki:${{ steps.rotki_version.outputs.version }}
          build-args: |
            REVISION=${{ github.sha }}
            ROTKI_VERSION=${{ steps.rotki_version.outputs.version }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
