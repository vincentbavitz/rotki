name: Rotki Nightly

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - build

jobs:
  test-backend:
    env:
      CI: true
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ 3.7 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup SQLCipher
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ];
          then
            sudo apt-get update
            sudo apt-get install libxml2-utils
            ./install_deps.sh
            sudo ldconfig
          fi
          if [ ${{ matrix.os }} == 'macos-latest' ];
          then
            brew install sqlcipher
          fi
      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Store python Cache (linux)
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Store python Cache (macOS)
        uses: actions/cache@v2
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Store test dir
        uses: actions/cache@v2
        with:
          path: ~/.cache/.rotkehlchen-test-dir
          key: ${{ runner.os }}-testdir
      - name: Install dependencies
        run: |
          pip install --upgrade "pip<19.0.0" wheel
          pip install codecov pytest-cov
          pip install -r requirements_dev.txt
          pip install -e .
      - name: Run Test
        run: |
          COVERAGE_ARGS='--cov=./'
          if [ ${{ matrix.os }} == 'macos-latest' ];
          then
            COVERAGE_ARGS=''
          fi
          python pytestgeventwrapper.py $COVERAGE_ARGS rotkehlchen/tests
      - name: Upload coverage
        run: bash <(curl -s https://codecov.io/bash) -F backend

  test-integration:
    needs: [ test-backend ]
    env:
      CI: true
      FILTER: '[ui tests]'
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.7 ]
        node-version: [ 12.x ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Store python cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.cache/.rotkehlchen-test-dir
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Store npm cache
        uses: actions/cache@v2
        if: contains(steps.check.outputs.ui-tests, true)
        with:
          path: |
            ~/.npm
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/requirements.txt') }}
      - name: Store frontend cache
        uses: actions/cache@v2
        with:
          path: |
            ~/rotki-e2e/price_history
            ~/rotki-e2e/icons
            ~/rotki-e2e/assets
          key: ${{ runner.os }}-e2e-cache-${{ hashFiles('**/app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-e2e-cache-
      - name: Setup SQLCipher
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils
          ./install_deps.sh
          sudo ldconfig
      - name: Setup backend
        run: |
          pip install -r requirements.txt
          pip install -e .
      - name: Run integration tests
        working-directory: ./frontend/app
        run: |
          if ! npm ci --exit-code; then
           npm ci
          fi
          npm run test:integration-ci
      - name: Upload coverage
        working-directory: ./frontend/app
        run: cd .. && bash <(curl -s https://codecov.io/bash) -F frontend_integration
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: screenshots-${{ runner.os }}
          path: ./frontend/app/tests/e2e/screenshots
      - name: Upload backend logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: backend-logs-${{ runner.os }}
          path: ~/rotkehlchen-e2e.log
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: videos-${{ runner.os }}
          path: ./frontend/app/tests/e2e/videos

  build-linux:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.7 ]
        node-version: [ 12.x ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: pip cache persistence
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: npm cache persistence
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/cache/Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Setup SQLCipher
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils
          ./install_deps.sh
          sudo ldconfig
      - name: Package
        id: packaging
        run: ./package.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nightly-linux
          path: |
            ${{ steps.packaging.outputs.binary }}
            ${{ steps.packaging.outputs.binary_checksum }}

  build-osx:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: [ macos-latest ]
        python-version: [ 3.7 ]
        node-version: [ 12.x ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        run: packaging/setup-osx.sh
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: pip cache persistence
        uses: actions/cache@v2
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: npm cache persistence
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/Library/Caches/Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Setup SQLCipher
        run: |
          cd "$(brew --repo homebrew/core)"
          git checkout 2731bfdc785e85de8242b164acbf4fcb627a91e2 Formula/sqlcipher.rb #This formula installs 4.4.0 of sqlcipher
          brew install sqlcipher
      - name: Package
        id: packaging
        run: |
          pip3 install virtualenv
          python3 -m virtualenv ~/venv
          source ~/venv/bin/activate
          ./package.sh
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          IDENTITY: ${{ secrets.IDENTITY }}
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nightly-osx
          path: |
            ${{ steps.packaging.outputs.binary }}
            ${{ steps.packaging.outputs.binary_checksum }}

  build-windows:
    env:
      CI: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SQLCIPHER_VERSION: 'v4.4.0'
      PYSQLCIPHER3_VERSION: 'fd1b547407bcb7198107fe3c458105286a060b0d'
      BUILD_DEPENDENCIES: "build-dependencies"
    strategy:
      matrix:
        os: [ windows-latest ]
        python-version: [ 3.7 ]
        node-version: [ 12.x ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: pip cache persistence
        uses: actions/cache@v2
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-packaging-${{ hashFiles('**/requirements.txt') }}
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: npm cache persistence
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.npm-cache.outputs.dir }}
            ~\AppData\Local\Cypress
          key: ${{ runner.os }}-node--packaging-${{ hashFiles('**/app/package-lock.json') }}
      - name: Persist Build Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~\${{ env.BUILD_DEPENDENCIES }}\
            ~\AppData\Local\Temp\chocolatey\
          key: ${{ runner.os }}-build-dependencies-${{ env.SQLCIPHER_VERSION }}-${{ env.PYSQLCIPHER3_VERSION }}
      - name: Build rotki
        id: packaging
        run: .\package.ps1
        shell: powershell
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nightly-windows
          path: |
            ${{ steps.packaging.outputs.binary }}
            ${{ steps.packaging.outputs.binary_checksum }}

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Rotki Version
        id: rotki_version
        run: |
          ROTKI_VERSION=$(cat .bumpversion.cfg | grep 'current_version = ' | sed -n -e 's/current_version = //p')
          POSTFIX=$(if git describe --tags --exact-match "$REVISION" &>/dev/null; then echo ''; else echo '-dev'; fi)
          ROTKI_VERSION=${ROTKI_VERSION}${POSTFIX}-$(date +'%Y.%m.%d')
          echo "::set-output name=version::${ROTKI_VERSION}"
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: rotki/rotki:nightly
          build-args: |
            REVISION=${{ github.sha }}
            ROTKI_VERSION=${{ steps.rotki_version.outputs.version }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
